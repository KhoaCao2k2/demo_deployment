pipeline {
    agent any

    options{
        // Max number of build logs to keep and days to keep
        buildDiscarder(logRotator(numToKeepStr: '5', daysToKeepStr: '5'))
        // Enable timestamp at each job in the pipeline
        timestamps()
    }

    environment{
        registry = 'khoacao2002/ocr_demo'
        registryCredential = 'dockerhub'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('Building Image') {
            steps {
                script {
                    echo 'Building image for deployment..'
                    // Check if app directory exists
                    sh 'ls -la'
                    sh 'ls -la app/ || echo "app directory not found"'
                    
                    dockerImage = docker.build("${registry}:${IMAGE_TAG}", "-f app/Dockerfile app")
                    dockerImage.tag("latest")
                }
            }
        }
        stage('Pushing Image') {
            steps{
                script {
                    docker.withRegistry( 'https://registry.hub.docker.com', registryCredential ) {
                        dockerImage.push("${IMAGE_TAG}")
                        dockerImage.push("latest")
                    }
                }
            }
        }
        stage('Deploy to Google Kubernetes Engine') {
            agent {
                kubernetes {
                    containerTemplate {
                        name 'helm' // Name of the container to be used for helm upgrade
                        image 'khoacao2002/jenkins_custom:v1' // The image containing helm
                    }
                }
            }
            steps {
                script {
                    container('helm') {
                        sh("helm upgrade --install  nginx-ingress helm_charts/nginx-ingress")
                    }
                    container('helm') {
                        sh("helm upgrade --install  model-deployment helm_charts/model-deployment")
                    }
                }
            }
        }
        
        stage('test') {
            steps {
                echo 'test'
            }
        }
    }
    
    post {
        always {
            // Clean up workspace
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}